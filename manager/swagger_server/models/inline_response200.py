# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class InlineResponse200(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    def __init__(self, active_until: datetime=None, user_name: str=None, user_id: str=None, subscription_info: List[object]=None):  # noqa: E501
        """InlineResponse200 - a model defined in Swagger

        :param active_until: The active_until of this InlineResponse200.  # noqa: E501
        :type active_until: datetime
        :param user_name: The user_name of this InlineResponse200.  # noqa: E501
        :type user_name: str
        :param user_id: The user_id of this InlineResponse200.  # noqa: E501
        :type user_id: str
        :param subscription_info: The subscription_info of this InlineResponse200.  # noqa: E501
        :type subscription_info: List[object]
        """
        self.swagger_types = {
            'active_until': datetime,
            'user_name': str,
            'user_id': str,
            'subscription_info': List[object]
        }

        self.attribute_map = {
            'active_until': 'active_until',
            'user_name': 'user_name',
            'user_id': 'user_id',
            'subscription_info': 'subscription_info'
        }
        self._active_until = active_until
        self._user_name = user_name
        self._user_id = user_id
        self._subscription_info = subscription_info

    @classmethod
    def from_dict(cls, dikt) -> 'InlineResponse200':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The inline_response_200 of this InlineResponse200.  # noqa: E501
        :rtype: InlineResponse200
        """
        return util.deserialize_model(dikt, cls)

    @property
    def active_until(self) -> datetime:
        """Gets the active_until of this InlineResponse200.

        date until gym subscription is active  # noqa: E501

        :return: The active_until of this InlineResponse200.
        :rtype: datetime
        """
        return self._active_until

    @active_until.setter
    def active_until(self, active_until: datetime):
        """Sets the active_until of this InlineResponse200.

        date until gym subscription is active  # noqa: E501

        :param active_until: The active_until of this InlineResponse200.
        :type active_until: datetime
        """
        if active_until is None:
            raise ValueError("Invalid value for `active_until`, must not be `None`")  # noqa: E501

        self._active_until = active_until

    @property
    def user_name(self) -> str:
        """Gets the user_name of this InlineResponse200.


        :return: The user_name of this InlineResponse200.
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name: str):
        """Sets the user_name of this InlineResponse200.


        :param user_name: The user_name of this InlineResponse200.
        :type user_name: str
        """
        if user_name is None:
            raise ValueError("Invalid value for `user_name`, must not be `None`")  # noqa: E501

        self._user_name = user_name

    @property
    def user_id(self) -> str:
        """Gets the user_id of this InlineResponse200.


        :return: The user_id of this InlineResponse200.
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id: str):
        """Sets the user_id of this InlineResponse200.


        :param user_id: The user_id of this InlineResponse200.
        :type user_id: str
        """

        self._user_id = user_id

    @property
    def subscription_info(self) -> List[object]:
        """Gets the subscription_info of this InlineResponse200.

        User's subscriptions history  # noqa: E501

        :return: The subscription_info of this InlineResponse200.
        :rtype: List[object]
        """
        return self._subscription_info

    @subscription_info.setter
    def subscription_info(self, subscription_info: List[object]):
        """Sets the subscription_info of this InlineResponse200.

        User's subscriptions history  # noqa: E501

        :param subscription_info: The subscription_info of this InlineResponse200.
        :type subscription_info: List[object]
        """
        if subscription_info is None:
            raise ValueError("Invalid value for `subscription_info`, must not be `None`")  # noqa: E501

        self._subscription_info = subscription_info
